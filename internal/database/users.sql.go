// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (ID, username, hashed_password, has_admin_privileges) VALUES (?, ?, ?, ?) RETURNING id, created_at, username, hashed_password, has_admin_privileges
`

type CreateNewUserParams struct {
	ID                 uuid.UUID
	Username           string
	HashedPassword     string
	HasAdminPrivileges bool
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (User, error) {
	row := q.queryRow(ctx, q.createNewUserStmt, createNewUser,
		arg.ID,
		arg.Username,
		arg.HashedPassword,
		arg.HasAdminPrivileges,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.HasAdminPrivileges,
	)
	return i, err
}

const deleteUserByUUID = `-- name: DeleteUserByUUID :exec
DELETE FROM users WHERE ID = ?
`

func (q *Queries) DeleteUserByUUID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteUserByUUIDStmt, deleteUserByUUID, id)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, username, hashed_password, has_admin_privileges FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Username,
			&i.HashedPassword,
			&i.HasAdminPrivileges,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, username, hashed_password, has_admin_privileges FROM users WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.HasAdminPrivileges,
	)
	return i, err
}

const getUserWithID = `-- name: GetUserWithID :one
SELECT id, created_at, username, hashed_password, has_admin_privileges FROM users WHERE ID = ? LIMIT 1
`

// @sqlc.returns *users
func (q *Queries) GetUserWithID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserWithIDStmt, getUserWithID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Username,
		&i.HashedPassword,
		&i.HasAdminPrivileges,
	)
	return i, err
}

const updateUserWhereUUID = `-- name: UpdateUserWhereUUID :exec
UPDATE users SET username=?, hashed_password=?, has_admin_privileges = ? WHERE ID =?
`

type UpdateUserWhereUUIDParams struct {
	Username           string
	HashedPassword     string
	HasAdminPrivileges bool
	ID                 uuid.UUID
}

func (q *Queries) UpdateUserWhereUUID(ctx context.Context, arg UpdateUserWhereUUIDParams) error {
	_, err := q.exec(ctx, q.updateUserWhereUUIDStmt, updateUserWhereUUID,
		arg.Username,
		arg.HashedPassword,
		arg.HasAdminPrivileges,
		arg.ID,
	)
	return err
}

const updateUsersPasswordWhereID = `-- name: UpdateUsersPasswordWhereID :exec
UPDATE users SET hashed_password=? WHERE ID = ?
`

type UpdateUsersPasswordWhereIDParams struct {
	HashedPassword string
	ID             uuid.UUID
}

func (q *Queries) UpdateUsersPasswordWhereID(ctx context.Context, arg UpdateUsersPasswordWhereIDParams) error {
	_, err := q.exec(ctx, q.updateUsersPasswordWhereIDStmt, updateUsersPasswordWhereID, arg.HashedPassword, arg.ID)
	return err
}
