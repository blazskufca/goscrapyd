// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scrapyd_nodes.sql

package database

import (
	"context"
	"database/sql"
)

const deleteScrapydNodes = `-- name: DeleteScrapydNodes :exec
DELETE FROM scrapyd_nodes WHERE nodeName = ?
`

func (q *Queries) DeleteScrapydNodes(ctx context.Context, nodename string) error {
	_, err := q.exec(ctx, q.deleteScrapydNodesStmt, deleteScrapydNodes, nodename)
	return err
}

const getNodeWithName = `-- name: GetNodeWithName :one
SELECT id, nodename, url, username, password FROM scrapyd_nodes WHERE nodeName = ? LIMIT 1
`

func (q *Queries) GetNodeWithName(ctx context.Context, nodename string) (ScrapydNode, error) {
	row := q.queryRow(ctx, q.getNodeWithNameStmt, getNodeWithName, nodename)
	var i ScrapydNode
	err := row.Scan(
		&i.ID,
		&i.Nodename,
		&i.Url,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const listScrapydNodes = `-- name: ListScrapydNodes :many
SELECT id, nodename, url, username, password FROM scrapyd_nodes
`

func (q *Queries) ListScrapydNodes(ctx context.Context) ([]ScrapydNode, error) {
	rows, err := q.query(ctx, q.listScrapydNodesStmt, listScrapydNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ScrapydNode
	for rows.Next() {
		var i ScrapydNode
		if err := rows.Scan(
			&i.ID,
			&i.Nodename,
			&i.Url,
			&i.Username,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const newScrapydNode = `-- name: NewScrapydNode :one
INSERT INTO scrapyd_nodes (
    nodeName, URL, username, password
) VALUES (?, ?, ?, ?) RETURNING id, nodename, url, username, password
`

type NewScrapydNodeParams struct {
	Nodename string
	Url      string
	Username sql.NullString
	Password []byte
}

func (q *Queries) NewScrapydNode(ctx context.Context, arg NewScrapydNodeParams) (ScrapydNode, error) {
	row := q.queryRow(ctx, q.newScrapydNodeStmt, newScrapydNode,
		arg.Nodename,
		arg.Url,
		arg.Username,
		arg.Password,
	)
	var i ScrapydNode
	err := row.Scan(
		&i.ID,
		&i.Nodename,
		&i.Url,
		&i.Username,
		&i.Password,
	)
	return i, err
}

const updateNodeWhereName = `-- name: UpdateNodeWhereName :exec
UPDATE scrapyd_nodes SET nodeName = ?1, URL = ?2, username = ?3,
                         password = ?4 WHERE nodeName = ?5
`

type UpdateNodeWhereNameParams struct {
	NewNodeName string
	NewURL      string
	NewUsername sql.NullString
	NewPassword []byte
	OldNodeName string
}

func (q *Queries) UpdateNodeWhereName(ctx context.Context, arg UpdateNodeWhereNameParams) error {
	_, err := q.exec(ctx, q.updateNodeWhereNameStmt, updateNodeWhereName,
		arg.NewNodeName,
		arg.NewURL,
		arg.NewUsername,
		arg.NewPassword,
		arg.OldNodeName,
	)
	return err
}
