class MetricsManager{constructor(){this.metricsCount=document.getElementById("metricsCount"),this.lastUpdated=document.getElementById("lastUpdated"),this.tableBody=document.getElementById("metricsTableBody"),this.lastRefreshed=document.getElementById("lastRefreshed"),this.userLocale=navigator.language||"en-US"}async fetchMetrics(){try{const t=await fetch("/metrics/json");if(!t.ok)throw new Error("Network response was not ok");return await t.json()}catch(t){return console.error("Error fetching metrics:",t),null}}formatDateTime(t){return new Date(1e3*t).toLocaleString(this.userLocale,{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1,timeZoneName:"short"})}formatValue(t){return t instanceof Date?this.formatDateTime(t):"object"==typeof t&&null!==t?JSON.stringify(t,null,2):t}createTableRow(t,e,r){const a=this.formatValue(e),n="object"==typeof e&&null!==e;return`\n            <tr class="${r%2==0?"bg-gray-50 dark:bg-gray-700":"bg-white dark:bg-gray-800"} hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors duration-150 ease-in-out">\n                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">\n                    ${t}\n                </td>\n                <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-400 ${n?"":"whitespace-nowrap"}">\n                    ${n?`<details class="cursor-pointer">\n                            <summary class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-900 dark:hover:text-indigo-300 focus:outline-none">\n                                View Details\n                            </summary>\n                            <pre class="mt-2 p-2 bg-gray-100 dark:bg-gray-700 rounded-md overflow-x-auto text-xs">${a}</pre>\n                        </details>`:a}\n                </td>\n            </tr>\n        `}flattenMetrics(t,e=""){return Object.entries(t).reduce(((t,[r,a])=>{const n=e?`${e}.${r}`:r;return a&&"object"==typeof a&&!Array.isArray(a)?[...t,...this.flattenMetrics(a,n)]:[...t,{key:n,value:a}]}),[])}updateTable(t){this.tableBody.innerHTML=t.map((({key:t,value:e},r)=>this.createTableRow(t,e,r))).join("")}async updateMetrics(){const t=await this.fetchMetrics();if(!t)return;const e=this.flattenMetrics(t);this.metricsCount.textContent=e.length,this.lastUpdated.textContent=this.formatDateTime(t.timestamp),this.updateTable(e),this.lastRefreshed.textContent=(new Date).toLocaleString(this.userLocale)}init(){document.documentElement.lang=this.userLocale,this.updateMetrics()}}document.addEventListener("DOMContentLoaded",(()=>{(new MetricsManager).init()}));
